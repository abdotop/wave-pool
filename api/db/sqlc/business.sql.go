// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: business.sql

package sqlc

import (
	"context"
)

const createBusiness = `-- name: CreateBusiness :one
INSERT INTO business (id, name, owner_id, country, currency)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, owner_id, name, country, currency, created_at
`

type CreateBusinessParams struct {
	ID       string `json:"id"`
	Name     string `json:"name"`
	OwnerID  string `json:"owner_id"`
	Country  string `json:"country"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateBusiness(ctx context.Context, arg CreateBusinessParams) (Business, error) {
	row := q.db.QueryRow(ctx, createBusiness,
		arg.ID,
		arg.Name,
		arg.OwnerID,
		arg.Country,
		arg.Currency,
	)
	var i Business
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Country,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getBusinessByID = `-- name: GetBusinessByID :one
SELECT id, owner_id, name, country, currency, created_at
FROM business
WHERE id = $1
`

func (q *Queries) GetBusinessByID(ctx context.Context, id string) (Business, error) {
	row := q.db.QueryRow(ctx, getBusinessByID, id)
	var i Business
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Country,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const getBusinessByOwnerID = `-- name: GetBusinessByOwnerID :one
SELECT id, owner_id, name, country, currency, created_at
FROM business
WHERE owner_id = $1
`

func (q *Queries) GetBusinessByOwnerID(ctx context.Context, ownerID string) (Business, error) {
	row := q.db.QueryRow(ctx, getBusinessByOwnerID, ownerID)
	var i Business
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Country,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

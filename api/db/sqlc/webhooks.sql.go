// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: webhooks.sql

package sqlc

import (
	"context"
)

const createWebhook = `-- name: CreateWebhook :one
INSERT INTO webhooks (
    id,
    business_id,
    url,
    signing_strategy,
    secret,
    events,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, business_id, url, signing_strategy, secret, events, status, created_at, updated_at
`

type CreateWebhookParams struct {
	ID              string   `json:"id"`
	BusinessID      string   `json:"business_id"`
	Url             string   `json:"url"`
	SigningStrategy string   `json:"signing_strategy"`
	Secret          string   `json:"secret"`
	Events          []string `json:"events"`
	Status          string   `json:"status"`
}

func (q *Queries) CreateWebhook(ctx context.Context, arg CreateWebhookParams) (Webhook, error) {
	row := q.db.QueryRow(ctx, createWebhook,
		arg.ID,
		arg.BusinessID,
		arg.Url,
		arg.SigningStrategy,
		arg.Secret,
		arg.Events,
		arg.Status,
	)
	var i Webhook
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.Url,
		&i.SigningStrategy,
		&i.Secret,
		&i.Events,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteWebhook = `-- name: DeleteWebhook :exec
DELETE FROM webhooks
WHERE id = $1
`

func (q *Queries) DeleteWebhook(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteWebhook, id)
	return err
}

const getWebhookByID = `-- name: GetWebhookByID :one
SELECT id, business_id, url, signing_strategy, secret, events, status, created_at, updated_at FROM webhooks
WHERE id = $1 AND business_id = $2
`

type GetWebhookByIDParams struct {
	ID         string `json:"id"`
	BusinessID string `json:"business_id"`
}

func (q *Queries) GetWebhookByID(ctx context.Context, arg GetWebhookByIDParams) (Webhook, error) {
	row := q.db.QueryRow(ctx, getWebhookByID, arg.ID, arg.BusinessID)
	var i Webhook
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.Url,
		&i.SigningStrategy,
		&i.Secret,
		&i.Events,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWebhooksByBusinessID = `-- name: ListWebhooksByBusinessID :many
SELECT id, business_id, url, signing_strategy, secret, events, status, created_at, updated_at FROM webhooks
WHERE business_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListWebhooksByBusinessID(ctx context.Context, businessID string) ([]Webhook, error) {
	rows, err := q.db.Query(ctx, listWebhooksByBusinessID, businessID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Webhook
	for rows.Next() {
		var i Webhook
		if err := rows.Scan(
			&i.ID,
			&i.BusinessID,
			&i.Url,
			&i.SigningStrategy,
			&i.Secret,
			&i.Events,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWebhook = `-- name: UpdateWebhook :one
UPDATE webhooks
SET
    url = $2,
    signing_strategy = $3,
    events = $4,
    status = $5,
    updated_at = NOW()
WHERE id = $1
RETURNING id, business_id, url, signing_strategy, secret, events, status, created_at, updated_at
`

type UpdateWebhookParams struct {
	ID              string   `json:"id"`
	Url             string   `json:"url"`
	SigningStrategy string   `json:"signing_strategy"`
	Events          []string `json:"events"`
	Status          string   `json:"status"`
}

func (q *Queries) UpdateWebhook(ctx context.Context, arg UpdateWebhookParams) (Webhook, error) {
	row := q.db.QueryRow(ctx, updateWebhook,
		arg.ID,
		arg.Url,
		arg.SigningStrategy,
		arg.Events,
		arg.Status,
	)
	var i Webhook
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.Url,
		&i.SigningStrategy,
		&i.Secret,
		&i.Events,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

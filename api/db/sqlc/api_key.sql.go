// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: api_key.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAPIKey = `-- name: CreateAPIKey :one
INSERT INTO api_keys (id, business_id, prefix, key_hash, scopes, env)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, business_id, prefix, key_hash, scopes, env, status, created_at
`

type CreateAPIKeyParams struct {
	ID         string   `json:"id"`
	BusinessID string   `json:"business_id"`
	Prefix     string   `json:"prefix"`
	KeyHash    string   `json:"key_hash"`
	Scopes     []string `json:"scopes"`
	Env        string   `json:"env"`
}

func (q *Queries) CreateAPIKey(ctx context.Context, arg CreateAPIKeyParams) (ApiKey, error) {
	row := q.db.QueryRow(ctx, createAPIKey,
		arg.ID,
		arg.BusinessID,
		arg.Prefix,
		arg.KeyHash,
		arg.Scopes,
		arg.Env,
	)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.Prefix,
		&i.KeyHash,
		&i.Scopes,
		&i.Env,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getAPIKeyByID = `-- name: GetAPIKeyByID :one
SELECT id, business_id, prefix, key_hash, scopes, env, status, created_at
FROM api_keys
WHERE id = $1
`

func (q *Queries) GetAPIKeyByID(ctx context.Context, id string) (ApiKey, error) {
	row := q.db.QueryRow(ctx, getAPIKeyByID, id)
	var i ApiKey
	err := row.Scan(
		&i.ID,
		&i.BusinessID,
		&i.Prefix,
		&i.KeyHash,
		&i.Scopes,
		&i.Env,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listAPIKeys = `-- name: ListAPIKeys :many
SELECT id, business_id, prefix, scopes, env, status, created_at
FROM api_keys
WHERE business_id = $1
ORDER BY created_at DESC
`

type ListAPIKeysRow struct {
	ID         string             `json:"id"`
	BusinessID string             `json:"business_id"`
	Prefix     string             `json:"prefix"`
	Scopes     []string           `json:"scopes"`
	Env        string             `json:"env"`
	Status     pgtype.Text        `json:"status"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) ListAPIKeys(ctx context.Context, businessID string) ([]ListAPIKeysRow, error) {
	rows, err := q.db.Query(ctx, listAPIKeys, businessID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAPIKeysRow
	for rows.Next() {
		var i ListAPIKeysRow
		if err := rows.Scan(
			&i.ID,
			&i.BusinessID,
			&i.Prefix,
			&i.Scopes,
			&i.Env,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const revokeAPIKey = `-- name: RevokeAPIKey :exec
UPDATE api_keys
SET status = 'revoked'
WHERE id = $1 AND business_id = $2
`

type RevokeAPIKeyParams struct {
	ID         string `json:"id"`
	BusinessID string `json:"business_id"`
}

func (q *Queries) RevokeAPIKey(ctx context.Context, arg RevokeAPIKeyParams) error {
	_, err := q.db.Exec(ctx, revokeAPIKey, arg.ID, arg.BusinessID)
	return err
}

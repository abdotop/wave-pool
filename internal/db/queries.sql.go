// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createCheckoutSession = `-- name: CreateCheckoutSession :exec
INSERT INTO checkout_sessions (
	id,
	amount,
	checkout_status,
	client_reference,
	currency,
	error_url,
	success_url,
	business_name,
	payment_status,
	transaction_id,
	aggregated_merchant_id,
	wave_launch_url,
	when_created,
	when_expires,
	when_completed,
	when_refunded,
	last_payment_error_code,
	last_payment_error_message
) VALUES (
	?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateCheckoutSessionParams struct {
	ID                      string
	Amount                  string
	CheckoutStatus          string
	ClientReference         sql.NullString
	Currency                string
	ErrorUrl                string
	SuccessUrl              string
	BusinessName            sql.NullString
	PaymentStatus           string
	TransactionID           sql.NullString
	AggregatedMerchantID    sql.NullString
	WaveLaunchUrl           string
	WhenCreated             string
	WhenExpires             string
	WhenCompleted           sql.NullString
	WhenRefunded            sql.NullString
	LastPaymentErrorCode    sql.NullString
	LastPaymentErrorMessage sql.NullString
}

func (q *Queries) CreateCheckoutSession(ctx context.Context, arg CreateCheckoutSessionParams) error {
	_, err := q.db.ExecContext(ctx, createCheckoutSession,
		arg.ID,
		arg.Amount,
		arg.CheckoutStatus,
		arg.ClientReference,
		arg.Currency,
		arg.ErrorUrl,
		arg.SuccessUrl,
		arg.BusinessName,
		arg.PaymentStatus,
		arg.TransactionID,
		arg.AggregatedMerchantID,
		arg.WaveLaunchUrl,
		arg.WhenCreated,
		arg.WhenExpires,
		arg.WhenCompleted,
		arg.WhenRefunded,
		arg.LastPaymentErrorCode,
		arg.LastPaymentErrorMessage,
	)
	return err
}

const getCheckoutSession = `-- name: GetCheckoutSession :one
SELECT id, amount, checkout_status, client_reference, currency, error_url, success_url, business_name, payment_status, transaction_id, aggregated_merchant_id, restrict_payer_mobile, enforce_payer_mobile, wave_launch_url, when_created, when_expires, when_completed, when_refunded, last_payment_error_code, last_payment_error_message
FROM checkout_sessions
WHERE id = ?
`

func (q *Queries) GetCheckoutSession(ctx context.Context, id string) (CheckoutSession, error) {
	row := q.db.QueryRowContext(ctx, getCheckoutSession, id)
	var i CheckoutSession
	err := row.Scan(
		&i.ID,
		&i.Amount,
		&i.CheckoutStatus,
		&i.ClientReference,
		&i.Currency,
		&i.ErrorUrl,
		&i.SuccessUrl,
		&i.BusinessName,
		&i.PaymentStatus,
		&i.TransactionID,
		&i.AggregatedMerchantID,
		&i.RestrictPayerMobile,
		&i.EnforcePayerMobile,
		&i.WaveLaunchUrl,
		&i.WhenCreated,
		&i.WhenExpires,
		&i.WhenCompleted,
		&i.WhenRefunded,
		&i.LastPaymentErrorCode,
		&i.LastPaymentErrorMessage,
	)
	return i, err
}
